# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GkgcyAJKFsb83De9CS9R93P3fyTpfXaX
"""

pip install transformers

!pip install gtts

!pip install diffusers transformers

pip install fastapi uvicorn

from transformers import pipeline

# Initialize the text generation pipeline
text_generation_pipe = pipeline("text-generation", model="distilgpt2")

# Define theme options
themes = ["Animals", "Clouds", "Colors", "Rainbows", "Space", "Underwater",
          "Dinosaurs", "Fairytales", "Jungle", "Superheroes", "Seasons",
          "Sports", "Vehicles", "Fantasy"]

# Display theme options and get user input
print("Please choose a theme from the following options:")
for theme in themes:
    print(theme)
selected_theme = input("Enter your selected theme: ")

# Validate the selected theme
if selected_theme not in themes:
    print("Invalid theme selected. Please run the cell again and choose a valid theme.")
else:
    # Generate a story based on the selected theme
    prompt = f"Once upon a time in a world of {selected_theme},"
    story = text_generation_pipe(prompt, max_length=1000, num_return_sequences=1)

    # Extract the generated story text
    generated_story = story[0]['generated_text']
    print("Here is your generated story:")
    print(generated_story)

    # Save the generated story to a file
    with open("generated_story.txt", "w") as file:
        file.write(generated_story)

from gtts import gTTS
from google.colab import files

# Read the generated story from the file
with open("generated_story.txt", "r") as file:
    generated_story = file.read()

# Convert the generated text to speech
tts = gTTS(text=generated_story, lang='en',slow=False)

tts.save("/content/gtts.wav")

from IPython.display import Audio
Audio("/content/gtts.wav")

pip install min-dalle -q

!nvidia-smi

import torch

if torch.cuda.is_available():
    print("GPU is available")
else:
    print("GPU is not available")

from transformers import pipeline
from PIL import Image, ImageDraw, ImageFont
import textwrap

img_width = 800
    img_height = 1000
    background_color = (255, 255, 255)
    text_color = (0, 0, 0)

    image = Image.new('RGB', (img_width, img_height), color=background_color)
    draw = ImageDraw.Draw(image)

    # Load a font
    font_size = 20
    try:
        font = ImageFont.truetype("arial.ttf", font_size)
    except IOError:
        font = ImageFont.load_default()

    # Wrap the text
    margin = 40
    offset = 40
    for line in textwrap.wrap(generated_story, width=70):
        draw.text((margin, offset), line, font=font, fill=text_color)
        offset += font_size + 10

    # Save the image
    image.save("generated_story.png")

    print("Story has been saved to generated_story.png")

from diffusers import DiffusionPipeline
import torch
from PIL import Image

# Initialize the DiffusionPipeline
pipeline = DiffusionPipeline.from_pretrained("prompthero/openjourney-v4")

# Function to generate images from a prompt
def generate_images(prompt, num_images=3):
    # Generate images
    images = pipeline(prompt, num_images=num_images).images

    # Save and display images
    for i, img in enumerate(images):
        img_filename = f"generated_image_{i+1}.png"
        img.save(img_filename)
        print(f"Image {i+1} saved as {img_filename}")
        img.show()

# Take user input for the prompt
prompt = input("Enter a prompt for the image generation: ")

# Generate and save images
generate_images(prompt)

from fastapi import FastAPI, Request
from pydantic import BaseModel
from transformers import pipeline
from gtts import gTTS
from fastapi.responses import FileResponse
import torch
from diffusers import DiffusionPipeline
import os

app = FastAPI()

text_generation_pipe = pipeline("text-generation", model="distilgpt2")

image_pipeline = DiffusionPipeline.from_pretrained("prompthero/openjourney-v4")

class ThemeInput(BaseModel):
    theme: str

# BaseModel for image prompt input
class ImagePromptInput(BaseModel):
    prompt: str

themes = ["Animals", "Clouds", "Colors", "Rainbows", "Space", "Underwater",
          "Dinosaurs", "Fairytales", "Jungle", "Superheroes", "Seasons",
          "Sports", "Vehicles", "Fantasy"]
@app.post("/generate-story/")
async def generate_story(data: ThemeInput):
    theme = data.theme
    if theme not in themes:
        return {"error": "Invalid theme selected."}

    prompt = f"Once upon a time in a world of {theme},"
    story = text_generation_pipe(prompt, max_length=1000, num_return_sequences=1)
    generated_story = story[0]['generated_text']

    # Save story to file
    story_file = "generated_story.txt"
    with open(story_file, "w") as file:
        file.write(generated_story)
    tts = gTTS(text=generated_story, lang='en', slow=False)
    tts_file = "generated_story.wav"
    tts.save(tts_file)

    return {"story": generated_story, "story_file": story_file, "tts_file": tts_file}
@app.post("/generate-image/")
async def generate_image(data: ImagePromptInput):
    prompt = data.prompt
    images = image_pipeline(prompt, num_images=1).images
    img_filename = "generated_image.png"
    images[0].save(img_filename)
    return {"image_file": img_filename}
@app.get("/download-story/")
async def download_story():
    return FileResponse("generated_story.txt")

@app.get("/download-tts/")
async def download_tts():
    return FileResponse("generated_story.wav")

@app.get("/download-image/")
async def download_image():
    return FileResponse("generated_image.png")